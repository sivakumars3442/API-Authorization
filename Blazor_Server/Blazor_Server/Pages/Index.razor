@page "/"
@inject HttpClient HttpClient
@using System.Security.Claims;
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.IdentityModel.Tokens;
@using System.Net.Http.Headers
@using System.Text;
<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
<p>@responseMessage</p>

<button @onclick="CallApi">Call API</button>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string responseMessage = "";
    private string Token = "";
    private async Task CallApi()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        //Generate user token based on the user authenticated state.
        if (user.Identity.IsAuthenticated)
        {
            Token = GenerateToken(user);
            try
            {
                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Token);
                responseMessage = await HttpClient.GetStringAsync("https://localhost:7136/api/Home/GetData");
            }
            catch (Exception ex)
            {
                responseMessage = "Error: " + ex.Message;
            }
        }
    }
    private string GenerateToken(ClaimsPrincipal user)
    {
        //Assign the security key value
        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("ACDt1vR3lXToPQ1g3MyN"));
        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);
        //Assign the user role value of authenticate server response
        var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToArray();
        roles = new string[] { "Admin" };
        var claims = new[]
        {
                new Claim(ClaimTypes.NameIdentifier,user.Identity.Name),
                new Claim(ClaimTypes.Role,string.Join(",", roles))
        };
        var token = new JwtSecurityToken("https://localhost:7136",
        "https://localhost:7136",
        claims,
        expires: DateTime.Now.AddMinutes(15),
        signingCredentials: credentials);
        return new JwtSecurityTokenHandler().WriteToken(token);
    }
}
